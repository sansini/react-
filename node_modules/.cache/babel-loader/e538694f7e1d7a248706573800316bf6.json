{"ast":null,"code":"/*\n * Swipe 2.0.0\n * Brad Birdsall\n * https://github.com/thebird/Swipe\n * Copyright 2013-2015, MIT License\n *\n */\n(function (root, factory) {\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.Swipe = factory();\n  }\n})(this, function () {\n  'use strict';\n\n  return function Swipe(container, options) {\n    // utilities\n    var noop = function noop() {}; // simple no operation function\n\n\n    var offloadFn = function offloadFn(fn) {\n      setTimeout(fn || noop, 0);\n    }; // offload a functions execution\n    // check browser capabilities\n\n\n    var browser = {\n      addEventListener: !!window.addEventListener,\n      touch: 'ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch,\n      transitions: function (temp) {\n        var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];\n\n        for (var i in props) {\n          if (temp.style[props[i]] !== undefined) return true;\n        }\n\n        return false;\n      }(document.createElement('swipe'))\n    }; // quit if no root element\n\n    if (!container) return;\n    var element = container.children[0];\n    var slides, slidePos, width, length;\n    options = options || {};\n    var index = parseInt(options.startSlide, 10) || 0;\n    var speed = options.speed || 300;\n    var continuous = options.continuous = options.continuous !== undefined ? options.continuous : true;\n\n    function _setup() {\n      // cache slides\n      slides = element.children;\n      length = slides.length; // set continuous to false if only one slide\n\n      continuous = slides.length < 2 ? false : options.continuous; // create an array to store current positions of each slide\n\n      slidePos = new Array(slides.length); // determine width of each slide\n\n      width = Math.round(container.getBoundingClientRect().width || container.offsetWidth);\n      element.style.width = slides.length * width + 'px'; // stack elements\n\n      var pos = slides.length;\n\n      while (pos--) {\n        var slide = slides[pos];\n        slide.style.width = width + 'px';\n        slide.setAttribute('data-index', pos);\n\n        if (browser.transitions) {\n          slide.style.left = pos * -width + 'px';\n          move(pos, index > pos ? -width : index < pos ? width : 0, 0);\n        }\n      } // reposition elements before and after index\n\n\n      if (continuous && browser.transitions) {\n        move(circle(index - 1), -width, 0);\n        move(circle(index + 1), width, 0);\n      }\n\n      if (!browser.transitions) element.style.left = index * -width + 'px';\n      container.style.visibility = 'visible';\n    }\n\n    function _prev() {\n      if (continuous) _slide(index - 1);else if (index) _slide(index - 1);\n    }\n\n    function _next() {\n      if (continuous) _slide(index + 1);else if (index < slides.length - 1) _slide(index + 1);\n    }\n\n    function circle(index) {\n      // a simple positive modulo using slides.length\n      return (slides.length + index % slides.length) % slides.length;\n    }\n\n    function _slide(to, slideSpeed) {\n      // do nothing if already on requested slide\n      if (index == to) return;\n\n      if (browser.transitions) {\n        var direction = Math.abs(index - to) / (index - to); // 1: backward, -1: forward\n        // get the actual position of the slide\n\n        if (continuous) {\n          var natural_direction = direction;\n          direction = -slidePos[circle(to)] / width; // if going forward but to < index, use to = slides.length + to\n          // if going backward but to > index, use to = -slides.length + to\n\n          if (direction !== natural_direction) to = -direction * slides.length + to;\n        }\n\n        var diff = Math.abs(index - to) - 1; // move all the slides between index and to in the right direction\n\n        while (diff--) {\n          move(circle((to > index ? to : index) - diff - 1), width * direction, 0);\n        }\n\n        to = circle(to);\n        move(index, width * direction, slideSpeed || speed);\n        move(to, 0, slideSpeed || speed);\n        if (continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place\n      } else {\n        to = circle(to);\n        animate(index * -width, to * -width, slideSpeed || speed); //no fallback for a circular continuous if the browser does not accept transitions\n      }\n\n      index = to;\n      offloadFn(options.callback && options.callback(index, slides[index]));\n    }\n\n    function move(index, dist, speed) {\n      translate(index, dist, speed);\n      slidePos[index] = dist;\n    }\n\n    function translate(index, dist, speed) {\n      var slide = slides[index];\n      var style = slide && slide.style;\n      if (!style) return;\n      style.webkitTransitionDuration = style.MozTransitionDuration = style.msTransitionDuration = style.OTransitionDuration = style.transitionDuration = speed + 'ms';\n      style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';\n      style.msTransform = style.MozTransform = style.OTransform = 'translateX(' + dist + 'px)';\n    }\n\n    function animate(from, to, speed) {\n      // if not an animation, just reposition\n      if (!speed) {\n        element.style.left = to + 'px';\n        return;\n      }\n\n      var start = +new Date();\n      var timer = setInterval(function () {\n        var timeElap = +new Date() - start;\n\n        if (timeElap > speed) {\n          element.style.left = to + 'px';\n          if (delay) begin();\n          options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);\n          clearInterval(timer);\n          return;\n        }\n\n        element.style.left = (to - from) * (Math.floor(timeElap / speed * 100) / 100) + from + 'px';\n      }, 4);\n    } // setup auto slideshow\n\n\n    var delay = options.auto || 0;\n    var interval;\n\n    function begin() {\n      clearTimeout(interval);\n      interval = setTimeout(_next, delay);\n    }\n\n    function _stop() {\n      delay = 0;\n      clearTimeout(interval);\n    } // setup initial vars\n\n\n    var _start = {};\n    var delta = {};\n    var isScrolling; // setup event capturing\n\n    var events = {\n      handleEvent: function handleEvent(event) {\n        switch (event.type) {\n          case 'touchstart':\n            this.start(event);\n            break;\n\n          case 'touchmove':\n            this.move(event);\n            break;\n\n          case 'touchend':\n            offloadFn(this.end(event));\n            break;\n\n          case 'webkitTransitionEnd':\n          case 'msTransitionEnd':\n          case 'oTransitionEnd':\n          case 'otransitionend':\n          case 'transitionend':\n            offloadFn(this.transitionEnd(event));\n            break;\n\n          case 'resize':\n            offloadFn(_setup);\n            break;\n        }\n\n        if (options.stopPropagation) event.stopPropagation();\n      },\n      start: function start(event) {\n        var touches = event.touches[0]; // measure start values\n\n        _start = {\n          // get initial touch coords\n          x: touches.pageX,\n          y: touches.pageY,\n          // store time to determine touch duration\n          time: +new Date()\n        }; // used for testing first move event\n\n        isScrolling = undefined; // reset delta and end measurements\n\n        delta = {}; // attach touchmove and touchend listeners\n\n        element.addEventListener('touchmove', this, false);\n        element.addEventListener('touchend', this, false);\n      },\n      move: function move(event) {\n        // ensure swiping with one touch and not pinching\n        if (event.touches.length > 1 || event.scale && event.scale !== 1) return;\n        if (options.disableScroll) return;\n        var touches = event.touches[0]; // measure change in x and y\n\n        delta = {\n          x: touches.pageX - _start.x,\n          y: touches.pageY - _start.y\n        }; // determine if scrolling test has run - one time test\n\n        if (typeof isScrolling == 'undefined') {\n          isScrolling = !!(isScrolling || Math.abs(delta.x) < Math.abs(delta.y));\n        } // if user is not trying to scroll vertically\n\n\n        if (!isScrolling) {\n          // prevent native scrolling\n          event.preventDefault(); // stop slideshow\n\n          _stop(); // increase resistance if first or last slide\n\n\n          if (continuous) {\n            // we don't add resistance at the end\n            translate(circle(index - 1), delta.x + slidePos[circle(index - 1)], 0);\n            translate(index, delta.x + slidePos[index], 0);\n            translate(circle(index + 1), delta.x + slidePos[circle(index + 1)], 0);\n          } else {\n            delta.x = delta.x / (!index && delta.x > 0 || // if first slide and sliding left\n            index == slides.length - 1 && // or if last slide and sliding right\n            delta.x < 0 // and if sliding at all\n            ? Math.abs(delta.x) / width + 1 // determine resistance level\n            : 1); // no resistance if false\n            // translate 1:1\n\n            translate(index - 1, delta.x + slidePos[index - 1], 0);\n            translate(index, delta.x + slidePos[index], 0);\n            translate(index + 1, delta.x + slidePos[index + 1], 0);\n          }\n\n          options.swiping && options.swiping(-delta.x / width);\n        }\n      },\n      end: function end(event) {\n        // measure duration\n        var duration = +new Date() - _start.time; // determine if slide attempt triggers next/prev slide\n\n        var isValidSlide = Number(duration) < 250 && // if slide duration is less than 250ms\n        Math.abs(delta.x) > 20 || // and if slide amt is greater than 20px\n        Math.abs(delta.x) > width / 2; // or if slide amt is greater than half the width\n        // determine if slide attempt is past start and end\n\n        var isPastBounds = !index && delta.x > 0 || // if first slide and slide amt is greater than 0\n        index == slides.length - 1 && delta.x < 0; // or if last slide and slide amt is less than 0\n\n        if (continuous) isPastBounds = false; // determine direction of swipe (true:right, false:left)\n\n        var direction = delta.x < 0; // if not scrolling vertically\n\n        if (!isScrolling) {\n          if (isValidSlide && !isPastBounds) {\n            if (direction) {\n              if (continuous) {\n                // we need to get the next in this direction in place\n                move(circle(index - 1), -width, 0);\n                move(circle(index + 2), width, 0);\n              } else {\n                move(index - 1, -width, 0);\n              }\n\n              move(index, slidePos[index] - width, speed);\n              move(circle(index + 1), slidePos[circle(index + 1)] - width, speed);\n              index = circle(index + 1);\n            } else {\n              if (continuous) {\n                // we need to get the next in this direction in place\n                move(circle(index + 1), width, 0);\n                move(circle(index - 2), -width, 0);\n              } else {\n                move(index + 1, width, 0);\n              }\n\n              move(index, slidePos[index] + width, speed);\n              move(circle(index - 1), slidePos[circle(index - 1)] + width, speed);\n              index = circle(index - 1);\n            }\n\n            options.callback && options.callback(index, slides[index]);\n          } else {\n            if (continuous) {\n              move(circle(index - 1), -width, speed);\n              move(index, 0, speed);\n              move(circle(index + 1), width, speed);\n            } else {\n              move(index - 1, -width, speed);\n              move(index, 0, speed);\n              move(index + 1, width, speed);\n            }\n          }\n        } // kill touchmove and touchend event listeners until touchstart called again\n\n\n        element.removeEventListener('touchmove', events, false);\n        element.removeEventListener('touchend', events, false);\n        element.removeEventListener('touchforcechange', function () {}, false);\n      },\n      transitionEnd: function transitionEnd(event) {\n        if (parseInt(event.target.getAttribute('data-index'), 10) == index) {\n          if (delay) begin();\n          options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);\n        }\n      }\n    }; // trigger setup\n\n    _setup(); // start auto slideshow if applicable\n\n\n    if (delay) begin(); // add event listeners\n\n    if (browser.addEventListener) {\n      // set touchstart event on element\n      if (browser.touch) {\n        element.addEventListener('touchstart', events, false);\n        element.addEventListener('touchforcechange', function () {}, false);\n      }\n\n      if (browser.transitions) {\n        element.addEventListener('webkitTransitionEnd', events, false);\n        element.addEventListener('msTransitionEnd', events, false);\n        element.addEventListener('oTransitionEnd', events, false);\n        element.addEventListener('otransitionend', events, false);\n        element.addEventListener('transitionend', events, false);\n      } // set resize event on window\n\n\n      window.addEventListener('resize', events, false);\n    } else {\n      window.onresize = function () {\n        _setup();\n      }; // to play nice with old IE\n\n    } // expose the Swipe API\n\n\n    return {\n      setup: function setup() {\n        _setup();\n      },\n      slide: function slide(to, speed) {\n        // cancel slideshow\n        _stop();\n\n        _slide(to, speed);\n      },\n      prev: function prev() {\n        // cancel slideshow\n        _stop();\n\n        _prev();\n      },\n      next: function next() {\n        // cancel slideshow\n        _stop();\n\n        _next();\n      },\n      stop: function stop() {\n        // cancel slideshow\n        _stop();\n      },\n      getPos: function getPos() {\n        // return current index position\n        return index;\n      },\n      getNumSlides: function getNumSlides() {\n        // return total number of slides\n        return length;\n      },\n      kill: function kill() {\n        // cancel slideshow\n        _stop(); // reset element\n\n\n        element.style.width = '';\n        element.style.left = ''; // reset slides\n\n        var pos = slides.length;\n\n        while (pos--) {\n          var slide = slides[pos];\n          slide.style.width = '';\n          slide.style.left = '';\n          if (browser.transitions) translate(pos, 0, 0);\n        } // removed event listeners\n\n\n        if (browser.addEventListener) {\n          // remove current event listeners\n          element.removeEventListener('touchstart', events, false);\n          element.removeEventListener('webkitTransitionEnd', events, false);\n          element.removeEventListener('msTransitionEnd', events, false);\n          element.removeEventListener('oTransitionEnd', events, false);\n          element.removeEventListener('otransitionend', events, false);\n          element.removeEventListener('transitionend', events, false);\n          window.removeEventListener('resize', events, false);\n        } else {\n          window.onresize = null;\n        }\n      }\n    };\n  };\n});","map":null,"metadata":{},"sourceType":"script"}